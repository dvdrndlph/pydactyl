#!/usr/bin/env python
__author__ = 'David Randolph'
# Copyright (c) 2020 David A. Randolph.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

import copy
from pydactyl.dcorpus.DCorpus import DCorpus
from pydactyl.dcorpus.PianoFingering import PianoFingering
from pydactyl.dcorpus.DEvaluation import DEvaluation, DEvalFunction

from pydactyl.dcorpus.DScore import DScore
from pydactyl.dcorpus.ABCDHeader import ABCDHeader


# da_corpus = DCorpus()
# da_corpus.append_from_db(client_id='695311d7e88d5f79b4945bf45d00cc77', selection_id='21')
# da_score = da_corpus.d_score_by_index(0)
# da_title = da_score.title()
# print(da_title)
# print(da_score)

piece_query = '''
    select exercise as piece_id,
           abc_fragment as abc_str
      from parncutt
     order by exercise'''

query = {}

query['all_american'] = '''
    select parncutt_fingering as fingering,
           total as weight,
           'Various Didactyl' as 'authority',
           'Pydactyl' as 'transcriber'
      from parncutt_binary
     where exercise = {}
     order by weight desc'''

query['pure_american'] = '''
    select parncutt as fingering,
           'Various Didactyl' as 'authority',
           'Pydactyl' as 'transcriber',
           count(*) as weight
      from parncutt_american_pure
     where exercise = {} 
       and Advised = 'No'
     group by parncutt
     order by weight desc'''

query['parncutt_published'] = '''
    select fingering,
           'Various Didactyl' as 'authority',
           'Pydactyl' as 'transcriber',
           subject_count as weight
      from parncutt_published
     where exercise = {}
     order by weight desc'''


target_dir = "/Users/dave/corpus/"
# for corpus_name in ['all_american', 'pure_american', 'parncutt_published']:
for corpus_name in ['parncutt_published']:
    da_corpus = DCorpus()
    da_corpus.assemble_and_append_from_db(piece_query=piece_query, fingering_query=query[corpus_name])
    staff = 'upper'
    full_context = False

    for da_score in da_corpus.d_score_list():
        system_scores = []
        human_score = copy.deepcopy(da_score)
        note_count = human_score.note_count(staff=staff)
        if note_count != 4:
            continue  # Focus on only exercise with pivots (which has 4 notes)
        print(da_score)
        abcdh = da_score.abcd_header()
        last_annot_id = abcdh.annotation_count()
        print("last id: {}".format(last_annot_id))
        PianoFingering.finger_score(d_score=human_score, staff=staff, id=last_annot_id)
        for i in range(5):
            system_scores.append(copy.deepcopy(da_score))
            PianoFingering.finger_score(d_score=system_scores[i], staff=staff, id=i+1)
        evil = DEvaluation(human_score=human_score, system_scores=system_scores, staff=staff)
        evil.print_pivot_count_report()
        for i in range(5):
            rank = i + 1
            hamming = evil.hamming_at_rank(rank=rank)
            also_hamming = evil.big_delta_at_rank(rank=rank)
            if hamming != also_hamming:
                raise Exception("Something's broken.")
            norm_hamming = evil.normalized_hamming_at_rank(rank=rank)

            trigram = evil.trigram_big_delta_at_rank(rank=rank, full_context=full_context)
            norm_trigram = evil.trigram_big_delta_at_rank(rank=rank, full_context=full_context, normalized=True)
            trigram_prime = evil.trigram_big_delta_at_rank(rank=rank, trigram_prime=DEvalFunction.delta_prime,
                                                           full_context=full_context)
            norm_trigram_complete = evil.trigram_big_delta_at_rank(rank=rank, trigram_prime=DEvalFunction.delta_prime,
                                                                   full_context=full_context, normalized=True)

            pivot_clashes = evil.pivot_clashes_at_rank(rank=rank)
            uniform_rho = evil.pivot_clashes_at_rank(rank=rank, decay_function=DEvalFunction.decay_uniform)
            no_decay_rho = evil.pivot_clashes_at_rank(rank=rank, decay_function=None)
            p_stop = evil.prob_stop_at_rank(rank=rank, rho_decay_function=None, big_delta_decay_function=None)
            trigram_p_stop = evil.trigram_prob_stop_at_rank(rank=rank, rho_decay_function=None,
                                                            big_delta_decay_function=None, full_context=True)
            print("Hamming at rank {} for {}-note sequence is {} (normalized to {})".format(rank, note_count,
                                                                                            hamming, norm_hamming))
            print("Trigram BD at rank {} for {}-note sequence is {} (normalized to {})".
                  format(rank, note_count, trigram_hamming, norm_trigram_hamming))
            print("Pivot clashes at rank {} for {}-note sequence is {})".format(rank, note_count, pivot_clashes))
            print("No-decay rho at rank {} for {}-note sequence is {})".format(rank, note_count, no_decay_rho))
            print("Uniform rho at rank {} for {}-note sequence is {})".format(rank, note_count, uniform_rho))
            print("P(stop) at rank {} for {}-note sequence is {})".format(rank, note_count, p_stop))
            print("Trigram P(stop) at rank {} for {}-note sequence is {})".format(rank, note_count, trigram_p_stop))

    print("\n")
