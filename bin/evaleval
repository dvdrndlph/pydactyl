#!/usr/bin/env python
__author__ = 'David Randolph'
# Copyright (c) 2020 David A. Randolph.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

import copy
from pydactyl.dcorpus.DCorpus import DCorpus
from pydactyl.dcorpus.PianoFingering import PianoFingering
from pydactyl.dcorpus.DEvaluation import DEvaluation, DEvalFunction

from pydactyl.dcorpus.DScore import DScore
from pydactyl.dcorpus.ABCDHeader import ABCDHeader


# da_corpus = DCorpus()
# da_corpus.append_from_db(client_id='695311d7e88d5f79b4945bf45d00cc77', selection_id='21')
# da_score = da_corpus.d_score_by_index(0)
# da_title = da_score.title()
# print(da_title)
# print(da_score)


full_abc_query = '''
    select exercise as piece_id,
           abc_full as abc_str
      from parncutt
     order by exercise'''

fragment_abc_query = '''
    select exercise as piece_id,
           abc_fragment as abc_str
      from parncutt
     order by exercise'''

query = {}

query['full_american'] = '''
    select f.upper_staff as fingering,
           count(*) as weight,
           'Various Didactyl' as 'authority',
           'Pydactyl' as 'transcriber'
      from finger f
     inner join parncutt p
        on f.exercise = p.exercise
     where f.exercise = {}
       and f.upper_staff is not null
       and length(f.upper_staff) = p.length_full
     group by f.upper_staff
     order by weight desc'''

query['all_american'] = '''
    select parncutt_fingering as fingering,
           total as weight,
           'Various Didactyl' as 'authority',
           'Pydactyl' as 'transcriber'
      from parncutt_binary
     where exercise = {}
     order by weight desc'''

query['pure_american'] = '''
    select parncutt as fingering,
           'Various Didactyl' as 'authority',
           'Pydactyl' as 'transcriber',
           count(*) as weight
      from parncutt_american_pure
     where exercise = {} 
       and Advised = 'No'
     group by parncutt
     order by weight desc'''

query['parncutt_published'] = '''
    select fingering,
           'Various Didactyl' as 'authority',
           'Pydactyl' as 'transcriber',
           subject_count as weight
      from parncutt_published
     where exercise = {}
     order by weight desc'''

staff = 'upper'
full_context = True
target_dir = "/Users/dave/corpus/"
rank_results = []
err_results = []
rank_headings = ['corpus', 'title', 'notes', 'rank', 'hmg', 'norm_hmg',
                 'ls', 'norm_ls',
                 'pvt_clsh', 'rho_no_d', 'rho_uni_d',
                 'p_sat', 'tri_p_sat', 'nua_p_sat', 'rlx_p_sat',
                 'tri_D', 'nua_D', 'rlx_D',
                 'norm_tri_D', 'norm_nua_D', 'norm_rlx_D']
err_headings = ['corpus', 'title', 'notes',
                'hmg', 'hmg_rho', 'ls', 'ls_rho',
                'tri', 'tri_rho', 'tri_nua', 'tri_nua_rho', 'tri_rlx', 'tri_rlx_rho']

result = {}
# for corpus_name in ['all_american', 'pure_american', 'parncutt_published', 'full_americank']:
for corpus_name in ['full_american']:
    piece_query = fragment_abc_query
    if corpus_name == 'full_american':
        piece_query = full_abc_query
    da_corpus = DCorpus()
    da_corpus.assemble_and_append_from_db(piece_query=piece_query, fingering_query=query[corpus_name])
    for da_score in da_corpus.d_score_list():
        system_scores = []
        human_score = copy.deepcopy(da_score)
        title = human_score.title()
        note_count = human_score.note_count(staff=staff)
        # if note_count != 4:
            # continue  # Focus on only exercise with pivots (which has 4 notes)
        # print(da_score)
        print("{} in {}".format(title, corpus_name))
        abcdh = da_score.abcd_header()
        last_annot_id = abcdh.annotation_count()
        # print("last id: {}".format(last_annot_id))
        PianoFingering.finger_score(d_score=human_score, staff=staff, id=last_annot_id)
        for i in range(5):
            system_scores.append(copy.deepcopy(da_score))
            PianoFingering.finger_score(d_score=system_scores[i], staff=staff, id=i+1)
        evil = DEvaluation(human_score=human_score, system_scores=system_scores,
                           staff=staff, full_context=full_context)
        evil.print_pivot_count_report()
        for i in range(5):
            result = {}
            result['corpus'] = corpus_name
            result['title'] = title
            result['notes'] = note_count
            rank = i + 1
            result['rank'] = rank
            result['hmg'] = evil.big_delta_at_rank(rank=rank)
            result['norm_hmg'] = evil.big_delta_at_rank(rank=rank, normalized=True)
            result['pvt_clsh'] = evil.pivot_clashes_at_rank(rank=rank)
            result['rho_no_d'] = evil.pivot_clashes_at_rank(rank=rank)
            result['p_sat'] = evil.prob_satisfied(rank=rank)

            evil.delta_function(DEvalFunction.delta_long_short)
            result['ls'] = evil.big_delta_at_rank(rank=rank)
            result['norm_ls'] = evil.big_delta_at_rank(rank=rank, normalized=True)

            result['tri_D'] = evil.trigram_big_delta_at_rank(rank=rank)
            result['norm_tri_D'] = evil.trigram_big_delta_at_rank(rank=rank)
            result['tri_p_sat'] = evil.trigram_prob_satisfied(rank=rank)

            evil.tau_function(DEvalFunction.tau_nuanced)
            result['nua_D'] = evil.trigram_big_delta_at_rank(rank=rank)
            result['norm_nua_D'] = evil.trigram_big_delta_at_rank(rank=rank, normalized=True)
            result['nua_p_sat'] = evil.trigram_prob_satisfied(rank=rank)

            evil.tau_function(DEvalFunction.tau_relaxed)
            result['rlx_D'] = evil.trigram_big_delta_at_rank(rank=rank)
            result['norm_rlx_D'] = evil.trigram_big_delta_at_rank(rank=rank, normalized=True)
            result['rlx_p_sat'] = evil.trigram_prob_satisfied(rank=rank)

            evil.rho_decay_function(DEvalFunction.decay_uniform)
            result['rho_uni_d'] = evil.pivot_clashes_at_rank(rank=rank)
            rank_results.append(result)

        evil.parameterize()  # Reset to defaults
        err_result = {}
        err_result['corpus'] = corpus_name
        err_result['title'] = title
        err_result['notes'] = note_count

        err_result['hmg'] = evil.expected_reciprocal_rank()
        evil.delta_function(DEvalFunction.delta_long_short)
        err_result['ls'] = evil.expected_reciprocal_rank()
        evil.rho_function(DEvalFunction.rho_power2)
        err_result['ls_rho'] = evil.expected_reciprocal_rank()
        evil.delta_function(DEvalFunction.delta_hamming)
        err_result['hmg_rho'] = evil.expected_reciprocal_rank()

        evil.rho_function(None)
        err_result['tri'] = evil.expected_reciprocal_rank(trigram=True)
        evil.tau_function(DEvalFunction.tau_nuanced)
        err_result['tri_nua'] = evil.expected_reciprocal_rank(trigram=True)
        evil.tau_function(DEvalFunction.tau_relaxed)
        err_result['tri_rlx'] = evil.expected_reciprocal_rank(trigram=True)

        evil.rho_function(DEvalFunction.rho_power2)
        err_result['tri_rlx_rho'] = evil.expected_reciprocal_rank(trigram=True)
        evil.tau_function(DEvalFunction.tau_nuanced)
        err_result['tri_nua_rho'] = evil.expected_reciprocal_rank(trigram=True)
        evil.tau_function(DEvalFunction.tau_trigram)
        err_result['tri_rho'] = evil.expected_reciprocal_rank(trigram=True)
        err_results.append(err_result)

# print(rank_results)
for field in rank_headings:
    print(field, end=',')
print()
for res in rank_results:
    for field in rank_headings:
        print(res[field], end=',')
    print()
print("\n")
for field in err_headings:
    print(field, end=',')
print()
for res in err_results:
    for field in err_headings:
        if field in ['corpus', 'title']:
            print("{:<20s}".format(res[field]), end=',')
        elif field in ['notes']:
            print(res[field], end=',')
            # print("{:>3d}".format(res[field]), end=',')
        else:
            print("{:6.4f}".format(float(res[field])), end=',')
    print()
print("\n")
