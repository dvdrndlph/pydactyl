#!/usr/bin/env python
__author__ = 'David Randolph'
# Copyright (c) 2014-2018 David A. Randolph.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt

from pydactyl.eval.Parncutter import Parncutter
from pydactyl.dactyler.Parncutt import Parncutt
from pydactyl.dactyler.Parncutt import Jacobs
from pydactyl.dactyler.Parncutt import Badgerow
# from pydactyl.dcorpus.DCorpus import DCorpus


def spew_out(name, method, result, itemized, spew=False):
    if spew:
        print("{} {}: {} => {}".format(name, method, result, itemized))


def published_parncutt_my_evaluate(cutter, name="", spew=False):
    epr_10, epr_10_itemized, undef = cutter.epr_at_k(k=10)
    spew_out(name=name, method='meanEPR@10', result=epr_10, itemized=epr_10_itemized, spew=spew)
    # dcpg_10, dcpg_10_itemized, undef = cutter.dcpg_at_k(k=10)
    # spew_out(name=name, method='meanDCPG@10', result=dcpg_10, itemized=dcpg_10_itemized, spew=spew)
    ndcpg_10, ndcpg_10_itemized, undef = cutter.ndcpg_at_k(k=10)
    spew_out(name=name, method='meanNDCPG@10', result=ndcpg_10, itemized=ndcpg_10_itemized, spew=spew)

    results = {
        'epr_10': {'result': epr_10, 'itemized': epr_10_itemized},
        # 'dcpg_10': {'result': dcpg_10, 'itemized': dcpg_10_itemized},
        'ndcpg_10': {'result': ndcpg_10, 'itemized': ndcpg_10_itemized},
    }
    return results


def published_parncutt_std_evaluate(cutter, name="", spew=False):
    err_10, err_10_itemized, undef = cutter.err_at_k(k=10)
    spew_out(name=name, method='meanERR@10', result=err_10, itemized=err_10_itemized, spew=spew)
    map_full, map_full_itemized, undef = cutter.map_at_perfect_recall()
    spew_out(name=name, method='MAP@perfectR', result=map_full, itemized=map_full_itemized, spew=spew)
    map_10, map_10_itemized, undef = cutter.map_at_k(k=10)
    spew_out(name=name, method='MAP@10', result=map_10, itemized=map_10_itemized, spew=spew)
    dcg_10, dcg_10_itemized, undef = cutter.dcg_at_k(k=10)
    spew_out(name=name, method='meanDCG@10', result=dcg_10, itemized=dcg_10_itemized, spew=spew)
    ndcg_10, ndcg_10_itemized, undef = cutter.ndcg_at_k(k=10)
    spew_out(name=name, method='meanNDCG@10', result=ndcg_10, itemized=ndcg_10_itemized, spew=spew)
    dcg_full, dcg_full_itemized, undef = cutter.dcg_at_k(k=None)
    spew_out(name=name, method='meanDCG@perfectR', result=dcg_full, itemized=dcg_full_itemized, spew=spew)
    ndcg_full, ndcg_full_itemized, undef = cutter.ndcg_at_k(k=None)
    spew_out(name=name, method='meanNDCG@perfectR', result=ndcg_full, itemized=ndcg_full_itemized, spew=spew)
    results = {
        'err_10': {'result': err_10, 'itemized': err_10_itemized},
        'map_full': {'result': map_full, 'itemized': map_full_itemized},
        'map_10': {'result': map_10, 'itemized': map_10_itemized},
        'dcg_10': {'result': dcg_10, 'itemized': dcg_10_itemized},
        'ndcg_10': {'result': ndcg_10, 'itemized': ndcg_10_itemized},
        'dcg_full': {'result': dcg_full, 'itemized': dcg_full_itemized},
        'ndcg_full': {'result': ndcg_full, 'itemized': ndcg_full_itemized},
    }
    return results


def graph_results(name, title, results):
    plt.style.use('classic')
    # x = np.arange(7)
    my_xticks = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
    fig, ax = plt.subplots()
    for method in results:
        itemized = results[method]['itemized']
        items = np.array(itemized, np.float)
        ax.plot(my_xticks, items, label=method)
    plt.title(title)
    fig.subplots_adjust(bottom=0.3)
    ax.set_ylim(0, 1)
    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), shadow=True, ncol=3)
    extension = 'pdf'
    file_path = '../../doc/drawings/pyplots/{}.{}'.format(name, extension)
    plt.savefig(file_path, format='pdf')
    # plt.show()


cutter = Parncutter()
cutter.load_data()
parncutt_std_results = published_parncutt_std_evaluate(cutter=cutter, name="Parncutt", spew=True)
graph_results(name="parncutt_on_parncutt_pub_std",
              title="Parncutt on Parncutt Published, Existing", results=parncutt_std_results)
# parncutt_my_results = published_parncutt_my_evaluate(cutter=cutter, name="Parncutt", spew=True)
# graph_results(name="parncutt_on_parncutt_pub_mine",
#               title="Parncutt on Parncutt Published, Novel", results=parncutt_my_results)

jacobs = Jacobs(segment_combiner="cost")
cutter = Parncutter(dactyler=jacobs)
cutter.load_data()
jacobs_std_results = published_parncutt_std_evaluate(cutter=cutter, name="Jacobs", spew=True)
graph_results(name="jacobs_on_parncutt_pub_std",
              title="Jacobs on Parncutt Published, Existing", results=jacobs_std_results)
# jacobs_my_results = published_parncutt_my_evaluate(cutter=cutter, name="Jacobs", spew=True)
# graph_results(name="jacobs_on_parncutt_pub_mine",
#               title="Jacobs on Parncutt Published, Novel", results=jacobs_my_results)

justin = Badgerow(segment_combiner="cost")
cutter = Parncutter(dactyler=justin)
cutter.load_data()
badgerow_std_results = published_parncutt_std_evaluate(cutter=cutter, name="Badgerow", spew=True)
graph_results(name="badgerow_on_parncutt_pub_std",
              title="Badgerow on Parncutt Published, Existing", results=badgerow_std_results)
# badgerow_my_results = published_parncutt_my_evaluate(cutter=cutter, name="Badgerow", spew=True)
# graph_results(name="badgerow_on_parncutt_pub_mine",
#               title="Badgerow on Parncutt Published, Novel", results=badgerow_my_results)

summary = list()
for method in ['err_10', 'dcg_10', 'dcg_full']:
    plt.style.use('classic')
    plt.title("Results Over Published Parncutt")
    my_xticks = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
    fig, ax = plt.subplots()
    p_result = parncutt_std_results[method]['result']
    p_itemized = parncutt_std_results[method]['itemized']
    p_items = np.array(p_itemized, np.float)
    j_result = jacobs_std_results[method]['result']
    j_itemized = jacobs_std_results[method]['itemized']
    j_items = np.array(j_itemized, np.float)
    b_result = badgerow_std_results[method]['result']
    b_itemized = badgerow_std_results[method]['itemized']
    b_items = np.array(b_itemized, np.float)

    ax.plot(my_xticks, p_items, label="Parncutt")
    ax.plot(my_xticks, j_items, label="Jacobs")
    ax.plot(my_xticks, b_items, label="Badgerow")
    fig.subplots_adjust(bottom=0.2)
    ax.set_ylim(0, 1)
    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), shadow=True, ncol=3)
    extension = 'pdf'
    file_path = '../../doc/drawings/pyplots/{}.{}'.format(method, extension)
    plt.savefig(file_path, format='pdf')
    # plt.show()

fmt = "{},{},{},{}"
print(fmt.format('Model', 'err_10', 'dcg_10', 'dcg_full'))
print(fmt.format('Parncutt',
                 parncutt_std_results['err_10']['result'],
                 parncutt_std_results['dcg_10']['result'],
                 parncutt_std_results['dcg_full']['result']))
print(fmt.format('Jacobs',
                 jacobs_std_results['err_10']['result'],
                 jacobs_std_results['dcg_10']['result'],
                 jacobs_std_results['dcg_full']['result']))
print(fmt.format('Badgerow',
                 badgerow_std_results['err_10']['result'],
                 badgerow_std_results['dcg_10']['result'],
                 badgerow_std_results['dcg_full']['result']))
